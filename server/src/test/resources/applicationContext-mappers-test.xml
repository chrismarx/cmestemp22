<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd">

	<bean id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ORGANIZATION_PARENTS_RECURSIVE" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />

	<bean id="getPrivateGroupIdsCoordinatedByPerson" 
		class="org.eurekastreams.server.persistence.mappers.GetPrivateGroupIdsCoordinatedByPerson"/>
		
    <bean class="org.eurekastreams.server.persistence.mappers.db.GetOrganizationLeaderIdsByOrgId" />
	
	<bean id="insertLikedActivity"
		class="org.eurekastreams.server.persistence.mappers.InsertLikedActivity">
		<property name="cache" ref="testCache" />
	</bean>

	<bean id="getLikedActivityIdsByUserId"
		class="org.eurekastreams.server.persistence.mappers.db.GetLikedActivityIdsByUserIdsDbMapper" />

	<bean id="deleteLikedActivity"
		class="org.eurekastreams.server.persistence.mappers.DeleteLikedActivity">
		<property name="cache" ref="testCache" />
	</bean>
	
	<bean id="getEveryoneActivityDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetEveryoneActivityDbMapper">
    </bean>
	<bean id="getPeopleWhoLikedActivityDbMapper"
        class="org.eurekastreams.server.persistence.mappers.db.GetPeopleWhoLikedActivityDbMapper"/>
        

    <bean id="refreshFollowedByActivitiesCacheMapper" class="org.eurekastreams.server.persistence.mappers.cache.RefreshFollowedByActivitiesCacheMapper">
       <property name="cache" ref="testCache" />
    </bean>
    <bean id="getFollowedByActivitiesDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetFollowedByActivitiesDbMapper">
        <constructor-arg ref="followedActivityIdsLoader" />
        <constructor-arg value="10" />
    </bean>
    
    <bean id="getFollowedByActivities" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.PartialMapperWrapper">
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheMapper">
						<constructor-arg>
							<bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
						</constructor-arg>
						<constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITIES_BY_FOLLOWING" />
						<property name="cache" ref="testCache" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		
		<!-- Database mapper to fall back on if not found in cache -->
		<constructor-arg ref="getFollowedByActivitiesDbMapper" />
		
		<constructor-arg>
			<!-- Results combiner - just returns the first non-null value -->
			<bean class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner"/>
		</constructor-arg>
		
		<!-- Cache refresher -->
		<constructor-arg ref="refreshFollowedByActivitiesCacheMapper" />
	</bean>
    
	<bean id="domainGroupBannerMapper" class="org.eurekastreams.server.persistence.mappers.DomainGroupBannerMapper"/>

	<bean id="organizationBannerMapper" class="org.eurekastreams.server.persistence.mappers.OrganizationBannerMapper"/>

	<bean id="getRefreshableFeedsMapper"
		class="org.eurekastreams.server.persistence.mappers.GetRefreshableFeedsMapper" />

	<bean id="setRefreshableFeedsAsPendingMapper"
		class="org.eurekastreams.server.persistence.mappers.SetRefreshableFeedsAsPending" />

    <bean id="deleteByIdMapper" class="org.eurekastreams.server.persistence.mappers.DeleteByIdMapper" />
		
    <bean id="getFeedSubscriptionsByEntity"
        class="org.eurekastreams.server.persistence.mappers.db.GetFeedSubscriptionsByEntity" />
                        
    <bean id="getAllPluginsMapper"
        class="org.eurekastreams.server.persistence.mappers.db.GetAllPluginsMapper" />
        
    <bean id="getFeedByUrlOrCreateMapper"
        class="org.eurekastreams.server.persistence.mappers.db.GetFeedByUrlOrCreateMapper" />
        
    <bean id="getFeedSubscriberOrCreateMapper"
        class="org.eurekastreams.server.persistence.mappers.db.GetFeedSubscriberOrCreateMapper" />    		
	
    <bean id="deleteImage"
        class="org.eurekastreams.server.persistence.mappers.db.DeleteImage" />
    
    <bean id="getImageByIdentifier"
        class="org.eurekastreams.server.persistence.mappers.db.GetImageByIdentifier" />
		
	<bean id="getRootOrganizationIdAndShortNameMapper"
		class="org.eurekastreams.server.persistence.mappers.GetRootOrganizationIdAndShortName" />
	
	<bean id="getPersonIdsWithStarredActivity"
		class="org.eurekastreams.server.persistence.mappers.stream.GetPersonIdsWithStarredActivity">
		<property name="queryOptimizer" ref="queryOptimizer" />
	</bean>
	
	<bean id="getGadgetUserPrefMapper"
		class="org.eurekastreams.server.persistence.mappers.opensocial.GetGadgetUserPrefMapper" />

	<bean id="commentDTOPopulator"
		class="org.eurekastreams.server.persistence.mappers.cache.cachedfieldpopulators.CommentDTOPopulator">
		<constructor-arg ref="getPersonsByIdsDBMapper" />
	</bean>
   
	<bean id="insertStarredActivity"
		class="org.eurekastreams.server.persistence.mappers.InsertStarredActivity">
		<constructor-arg ref="getStarredActivityIds" />
		<property name="cache" ref="testCache" />
	</bean>

	<bean id="updateSystemSettings" class="org.eurekastreams.server.persistence.mappers.UpdateMapper">
	</bean>

	<bean id="findSystemSettingsDbDomainMapper"
		class="org.eurekastreams.server.persistence.mappers.db.FindSystemSettingsDbDomainMapperImpl">
		<constructor-arg value="HeaderTemplate" />
		<constructor-arg value="FooterTemplate" />
		<property name="queryOptimizer" ref="queryOptimizer" />
	</bean>

	<bean id="deleteStarredActivity" class="org.eurekastreams.server.persistence.mappers.DeleteStarredActivity">
		<property name="cache" ref="testCache" />
	</bean>

	<bean id="testCache"
		class="org.eurekastreams.server.persistence.mappers.cache.testhelpers.SimpleMemoryCache" />

	<!-- Mapper to get people ids by account ids -->
	<bean id="getPeopleIdsByAccountIdsMapper" class="org.eurekastreams.server.persistence.mappers.db.GetIdsFromPointersDbMapper">
		<constructor-arg value="accountId" />
		<constructor-arg value="org.eurekastreams.server.domain.Person" />
	</bean>
		 
	<!-- Mapper to get person id by account id - wraps getPeopleIdsByAccountIds - throws exception when not found
-->
	<bean id="getPersonIdByAccountIdMapper" class="org.eurekastreams.server.persistence.mappers.SingleValueCollectionMapperWrapper">
		<constructor-arg ref="getPeopleIdsByAccountIdsMapper" />
		<constructor-arg value="true" />
	</bean>


	<!-- Mapper to get people by account ids -->
	<bean id="getPeopleByAccountIdsMapper" class="org.eurekastreams.server.persistence.mappers.GetItemsByPointerIdsMapper">
		<!-- Mapper to get people ids from account ids -->
		<constructor-arg>
			<bean class="org.eurekastreams.server.persistence.mappers.db.GetIdsFromPointersDbMapper">
				<constructor-arg value="accountId" />
				<constructor-arg value="org.eurekastreams.server.domain.Person" />
			</bean>
		</constructor-arg>
		
		<!-- mapper to look up people by ids -->
		<constructor-arg ref="getPersonsByIdsDBMapper" />
	</bean>

	<!-- Mapper to get person model view by account id - wraps getPeopleByAccountIdsMapper - throws exception when not found
-->
	<bean id="getPersonByAccountIdMapper" class="org.eurekastreams.server.persistence.mappers.SingleValueCollectionMapperWrapper">
		<constructor-arg ref="getPeopleByAccountIdsMapper" />
		<constructor-arg value="true" />
	</bean>

	<bean id="bulkActivitiesMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.BulkActivitiesDbMapper">
		<constructor-arg ref="getPersonByAccountIdMapper" /> 
		<constructor-arg ref="getPeopleByAccountIdsMapper" />
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<constructor-arg ref="getOrderedCommentIdsByActivityIdDbMapper" />
		<constructor-arg ref="getCommentsById" />
	</bean>
	
	<bean
		id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITY_BY_ID"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />

	<bean id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITIES_BY_FOLLOWING"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />

	<bean id="bulkActivityMapperWithCache"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
				</constructor-arg>
				<constructor-arg
					ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITY_BY_ID" />
				<constructor-arg value="False" />
				<property name="cache" ref="testCache" />
			</bean>
		</constructor-arg>

		<constructor-arg ref="bulkActivitiesMapper" />

		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
		</constructor-arg>

		<constructor-arg>
			<!-- Cache refresher -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.BulkActivityRefresher">
				<property name="cache" ref="testCache" />
			</bean>
		</constructor-arg>
	</bean>

	
	<bean id="getOrganizationCoordinatorIdsByOrganizationIdDbMapper" 
		class="org.eurekastreams.server.persistence.mappers.db.GetOrganizationCoordinatorIdsByOrganizationIdDbMapper"/>
		
    <bean id="getTutorialVideosDbMapper" 
        class="org.eurekastreams.server.persistence.mappers.db.GetTutorialVideosDbMapper"/>
        
    <bean id="getPrivateGroupIdsUnderOrganizationsFromDB" 
    	class="org.eurekastreams.server.persistence.mappers.db.GetPrivateGroupIdsUnderOrganizations"/>
        
    <bean class="org.eurekastreams.server.persistence.mappers.db.GetOrgIdsDirectlyCoordinatedByPerson" />
    
    <bean id="getOrgCoordinators" class="org.eurekastreams.server.persistence.mappers.GetOrgCoordinators">
    	<constructor-arg ref="getOrganizationCoordinatorIdsByOrganizationIdDbMapper"/>
    	<property name="cache" ref="testCache" />
    </bean>
    
    <bean id="getRecursiveParentOrgIdsMapper" class="org.eurekastreams.server.persistence.mappers.db.GetParentOrgIdsRecursiveByOrgIdDbMapper" />
    
    <bean id="getRecursiveOrgCoordinators"
		class="org.eurekastreams.server.persistence.mappers.GetRecursiveOrgCoordinators">
		<constructor-arg ref="organizationHierarchyCache" />
		<constructor-arg ref="getOrgCoordinators" />
		<constructor-arg value="true" />
		<constructor-arg ref="getPersonIdByAccountIdMapper"/>
		<constructor-arg ref="testCache" />
	</bean>
	
	<bean id="getRecursiveOrgCoordinatorsDownStream"
		class="org.eurekastreams.server.persistence.mappers.GetRecursiveOrgCoordinators">
		<constructor-arg ref="organizationHierarchyCache" />
		<constructor-arg ref="getOrgCoordinators" />
		<constructor-arg value="false" />
		<constructor-arg ref="getPersonIdByAccountIdMapper"/>
		<constructor-arg ref="testCache" />
	</bean>
	
	<bean id="getAllPersonIdsWhoHaveGroupCoordinatorAccess"
		class="org.eurekastreams.server.persistence.mappers.GetAllPersonIdsWhoHaveGroupCoordinatorAccess">
		<constructor-arg ref="getGroupCoordinatorIdsByGroupIdDbMapper"/>
		<constructor-arg ref="getGroupsByIdsDbMapper"/>
		<constructor-arg ref="bulkOrganizationsByShortNameMapper"/>
		<constructor-arg ref="getRecursiveOrgCoordinators"/>
		<constructor-arg ref="getPersonIdByAccountIdMapper"/>
	</bean>


	<bean id="commentDeletePropertyStrategy"
		class="org.eurekastreams.server.persistence.strategies.CommentDeletePropertyStrategy">
		<constructor-arg ref="getPersonByAccountIdMapper" />
		<constructor-arg ref="getPersonIdByAccountIdMapper" />
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
		<constructor-arg ref="getRecursiveOrgCoordinators" />
	</bean>
	
	<bean id="personQueryStrategy" class="org.eurekastreams.server.persistence.strategies.PersonQueryStrategy" />
	
	<bean id="domainGroupQueryStrategy" class="org.eurekastreams.server.persistence.strategies.DomainGroupQueryStrategy" /><!--

	-->

	<bean id="reorderFollowedGroupIds"
		class="org.eurekastreams.server.persistence.mappers.stream.ReorderFollowedGroupIds">
		<property name="cache" ref="testCache" />
	</bean>	

	<bean id="bulkPeopleByOpenSocialIdMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetPeopleByOpenSocialIds">
		<property name="bulkPeopleMapper" ref="getPersonsByIdsDBMapper" />
		
		<property name="idsByStringsMapper">
            <bean class="org.eurekastreams.server.persistence.mappers.db.GetIdsFromPointersDbMapper">
                <constructor-arg value="openSocialId" />
                <constructor-arg value="org.eurekastreams.server.domain.Person" />
            </bean>
        </property>
	</bean>

	<bean id="bulkOrganizationsByShortNameMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetOrganizationsByShortNames">
		<property name="bulkOrganizationsMapper" ref="getOrganizationsByIdsDbMapper" />
		<property name="idsByStringsMapper">
            <bean class="org.eurekastreams.server.persistence.mappers.db.GetIdsFromPointersDbMapper">
                <constructor-arg value="shortName" />
                <constructor-arg value="org.eurekastreams.server.domain.Organization" />
            </bean>
        </property>
	</bean>

	<bean id="bulkDomainGroupsByShortNameMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetDomainGroupsByShortNames">
		<property name="bulkDomainGroupsMapper" ref="getGroupsByIdsDbMapper" />
		<property name="idsByStringsMapper">
            <bean class="org.eurekastreams.server.persistence.mappers.db.GetIdsFromPointersDbMapper">
                <constructor-arg value="shortName" />
                <constructor-arg value="org.eurekastreams.server.domain.DomainGroup" />
            </bean>
        </property>
	</bean>

	<bean id="getStreamScopeProxyById"
		class="org.eurekastreams.server.persistence.mappers.GetStreamScopeProxyById" />

	<bean id="getStreamScopeById"
		class="org.eurekastreams.server.persistence.mappers.GetStreamScopeById" />

	<bean id="getStarredActivityIds"
		class="org.eurekastreams.server.persistence.mappers.stream.GetStarredActivityIds">
		<property name="cache" ref="testCache" />
	</bean>

	<bean id="getCommentsById"
		class="org.eurekastreams.server.persistence.mappers.stream.GetCommentsById">
		<constructor-arg ref="commentDTOPopulator" />
		<property name="cache" ref="testCache" />
	</bean>

	<bean id="deleteActivityComment"
		class="org.eurekastreams.server.persistence.mappers.stream.DeleteActivityComment">
		<constructor-arg ref="getCommentsById" />
		<property name="cache" ref="testCache" />
	</bean>

	<bean id="insertActivityComment"
		class="org.eurekastreams.server.persistence.mappers.stream.InsertActivityComment">
		<constructor-arg ref="commentDTOPopulator" />
		<property name="cache" ref="testCache" />
	</bean>
	
	<bean id="deleteActivity"
		class="org.eurekastreams.server.persistence.mappers.stream.DeleteActivity">
		<constructor-arg ref="bulkActivitiesMapper" />
		<property name="cache" ref="testCache" />
	</bean>
	
	<bean id="deleteActivityCacheUpdate"
		class="org.eurekastreams.server.persistence.mappers.stream.DeleteActivityCacheUpdate">
		<constructor-arg ref="getFollowerPersonIdsForPersonByIdDbMapper" />
		<constructor-arg ref="getFollowerPersonIdsForGroupByIdDbMapper" />
		<constructor-arg ref="getPersonByAccountIdMapper" />
		<constructor-arg ref="getPersonIdByAccountIdMapper" />
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<constructor-arg ref="getPeopleWhoLikedActivityDbMapper" />
		<property name="cache" ref="testCache" />
	</bean>
	
	<bean id="postActivityUpdateStreamsByActorMapper"
	   class="org.eurekastreams.server.persistence.mappers.cache.PostActivityUpdateStreamsByActorMapper">
	   <constructor-arg ref="getPersonByAccountIdMapper" />
	   <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
	   <constructor-arg>
		   <bean class="org.eurekastreams.server.persistence.mappers.db.GetStreamScopeIdForScopeTypeByUniqueKey">
		        <constructor-arg>
		             <value type="org.eurekastreams.server.domain.stream.StreamScope$ScopeType">RESOURCE</value>
		        </constructor-arg>
		        <constructor-arg value="true" />
		    </bean>
	   </constructor-arg>
	   <property name="cache" ref="testCache" />
	</bean>

	<bean id="updateCachedOrganizationName"
		class="org.eurekastreams.server.persistence.UpdateCachedOrganizationName">
		<property name="cache" ref="testCache"/>
	</bean>

	<bean id="orgParentHierarchyCacheCleaner" class="org.eurekastreams.server.persistence.mappers.cache.OrgParentHierarchyCacheCleaner">
		<property name="cache" ref="testCache" />
		<property name="getRecursiveParentOrgIdsMapper" ref="getRecursiveParentOrgIdsMapper"/>
	</bean>

	<!--
		Domain Group Cache Loader - will be injected into actions/mappers that
		need to update the cache
	-->
	<bean id="domainGroupCacheLoader"
		class="org.eurekastreams.server.persistence.mappers.cache.DomainGroupCacheLoader">
		<constructor-arg ref="domainGroupQueryStrategy"/>
		<property name="cache" ref="testCache" />
	</bean>

	<!-- Person Cache Loader -->
	<bean id="personCacheLoader"
		class="org.eurekastreams.server.persistence.mappers.cache.PersonCacheLoader">
		<constructor-arg ref="personQueryStrategy" />
		<constructor-arg ref="getRelatedOrganizationIdsByPersonId"/>
        <property name="cache" ref="testCache" />
	</bean>
	
	<bean id="followedActivityIdsLoader" class="org.eurekastreams.server.persistence.mappers.cache.FollowedActivityIdsLoaderImpl" />
    
    <bean id="updaterStrategy" class="org.eurekastreams.server.service.actions.strategies.ReflectiveUpdater"/>
    
    <bean id="isRootOrgCoordinatorStrategy" class="org.eurekastreams.server.action.authorization.IsRootOrganizationCoordinator">
        <constructor-arg ref="getRootOrganizationIdAndShortNameMapper" />
        <constructor-arg ref="getOrgCoordinators" />
    </bean>
    
    <bean id="insertMapper" class="org.eurekastreams.server.persistence.mappers.InsertMapper" />

	<bean id="findByIdMapper" class="org.eurekastreams.server.persistence.mappers.FindByIdMapper">
		<property name="queryOptimizer" ref="queryOptimizer" />
	</bean>
	
	<bean id="getCommentorIdsByActivityId" class="org.eurekastreams.server.persistence.mappers.db.GetCommentorIdsByActivityId" />
	
	<bean id="getNotificationFilterPreferencesByPersonId" class="org.eurekastreams.server.persistence.mappers.db.GetNotificationFilterPreferencesByPersonId" />

	<bean id="setUserNotificationFilterPreferences" class="org.eurekastreams.server.persistence.mappers.db.SetUserNotificationFilterPreferences" />

    <bean id="getNotificationFilterPreferencesByPeopleIds" 
    	class="org.eurekastreams.server.persistence.mappers.db.GetNotificationFilterPreferencesByPeopleIds" />
	
	<bean id="setAllApplicationAlertsAsReadByUserId"
		class="org.eurekastreams.server.persistence.mappers.db.SetAllApplicationAlertsAsReadByUserId" />
	
	<bean id="getApplicationAlertsByUserId"
		class="org.eurekastreams.server.persistence.mappers.db.GetApplicationAlertsByUserId" />
	
	<bean id="deleteApplicationAlertsByDate"
		class="org.eurekastreams.server.persistence.mappers.db.DeleteApplicationAlertsByDate" />
	
	<bean id="getUserIdsWithUnreadApplicationAlertsByDate"
		class="org.eurekastreams.server.persistence.mappers.db.GetUserIdsWithUnreadApplicationAlertsByDate" />
	
	<bean id="getUnreadApplicationAlertCountByUserId" 
		class="org.eurekastreams.server.persistence.mappers.db.notification.GetUnreadApplicationAlertCountByUserId">
		<property name="queryOptimizer" ref="queryOptimizer" />
	</bean>

	<bean id="populatePeopleWithSkeletonRelatedOrgsCacheMapper" class="org.eurekastreams.server.persistence.mappers.cache.PopulatePeopleWithSkeletonRelatedOrgsCacheMapper">
		<constructor-arg ref="getOrganizationsByIdsDbMapper" />
		<constructor-arg ref="getPersonsByIdsDBMapper" />
	</bean>
	
	<bean id="deleteGroupActivity" class="org.eurekastreams.server.persistence.mappers.db.DeleteGroupActivity" />
	
	<bean id="deleteActivities" class="org.eurekastreams.server.persistence.mappers.db.DeleteActivities" />
	
	<bean id="removeGroupFollowers" class="org.eurekastreams.server.persistence.mappers.db.RemoveGroupFollowers" />
	
	<bean id="deleteGroupSubscriptions" class="org.eurekastreams.server.persistence.mappers.db.DeleteAllFeedSubscriberByEntityTypeAndId" />
	
	<bean id="deleteGroup" class="org.eurekastreams.server.persistence.mappers.db.DeleteGroup" >
		<constructor-arg ref="findByIdMapper" />
		<constructor-arg ref="jpaOrganizationMapper" />
		<constructor-arg>
		      <bean class="org.eurekastreams.server.domain.strategies.OrganizationHierarchyTraverserBuilder" />
		</constructor-arg>
		<constructor-arg ref="getRecursiveParentOrgIdsMapper" />
		<constructor-arg ref="getOrgShortNamesByIdsMapper" />
	</bean>

	<bean id="getRelatedOrganizationIdsByPersonId" class="org.eurekastreams.server.persistence.mappers.GetRelatedOrganizationIdsByPersonId" />
	
	<bean id="getExpiredActivities" class="org.eurekastreams.server.persistence.mappers.db.GetExpiredActivities" />
	
	<bean id="removeExpiredActivities"
		class="org.eurekastreams.server.persistence.mappers.cache.RemoveExpiredActivities">
		<property name="cache" ref="testCache" />
	</bean>
	
	<bean id="removeIdsFromLists"
		class="org.eurekastreams.server.persistence.mappers.cache.RemoveIdsFromLists">
		<property name="cache" ref="testCache" />
	</bean>
	
	<bean id="getFlaggedActivitiesForOrganizationMapper" class="org.eurekastreams.server.persistence.mappers.stream.GetFlaggedActivitiesForOrganization">
		<constructor-arg ref="bulkActivitiesMapper"/>
	</bean>
	
    <bean id="deleteOrganizationMapper" class="org.eurekastreams.server.persistence.mappers.db.DeleteOrganizationDbMapper" >
        <constructor-arg ref="findByIdMapper"/>
    </bean>
    
    <bean id="getPersonIds" class="org.eurekastreams.server.persistence.mappers.db.GetSerializableField" >
        <constructor-arg value="Person"/>
        <constructor-arg value="id"/>        
    </bean>
    
    <bean id="getPeopleSkillsByPeopleIdsDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetSkillsAndInterestsByEmployeeIdsDbMapper" />
    <bean id="getPersonsByIdsDBMapper" class="org.eurekastreams.server.persistence.mappers.db.GetPersonsByIds">
        <constructor-arg ref="personQueryStrategy" />
        <constructor-arg ref="getRelatedOrganizationIdsByPersonId" />
        <constructor-arg ref="getOrganizationsByIdsDbMapper" />
        <constructor-arg ref="getPeopleSkillsByPeopleIdsDbMapper" />
    </bean>
    
    <bean id="getGroupsByIdsDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetGroupsByIdsDbMapper">
        <constructor-arg ref="domainGroupQueryStrategy" />
    </bean>
    
    <bean id="getCommentsByIdsDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetCommentsByIdsDbMapper">
        <constructor-arg ref="commentDTOPopulator" />
    </bean>   
    
    <bean id="getThemeXmlUrlByUuidDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetThemeXmlUrlByUuidDbMapper"/>
    
    <bean id="getOrderedCommentIdsByActivityIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetOrderedCommentIdsByActivityIdDbMapper" />
        
    <bean id="getOrganizationsByIdsDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetOrganizationsByIdsDbMapper" />
    
    <bean id="getChildOrgIdsRecursiveByOrgIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetChildOrgIdsRecursiveByOrgIdDbMapper" />
        
    <bean id="getGroupCoordinatorIdsByGroupIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetGroupCoordinatorIdsByGroupIdDbMapper" />
    
    <bean id="getFollowedGroupIdsForPersonByIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetFollowedGroupIdsForPersonByIdDbMapper" />
    
    <bean id="getFollowerPersonIdsForGroupByIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetFollowerPersonIdsForGroupByIdDbMapper" />
    
    <bean id="getFollowerPersonIdsForPersonByIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetFollowerPersonIdsForPersonByIdDbMapper" />
    
    <bean id="getFollowedPersonIdsForPersonByIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetFollowedPersonIdsForPersonByIdDbMapper" />
    
    <bean id="getRelatedEntityCountMapper" class="org.eurekastreams.server.persistence.mappers.db.GetRelatedEntityCount" />
	
	<bean id="moveOrganizationPeopleMapper" class="org.eurekastreams.server.persistence.mappers.db.MoveOrganizationPeopleDBMapper" />
	
	<bean id="getPeopleIdsWithRelatedOrg" class="org.eurekastreams.server.persistence.mappers.db.GetPeopleIdsWithRelatedOrg" />
	
	<bean id="syncParentOrgForGroupActivities" class="org.eurekastreams.server.persistence.mappers.db.SyncParentOrgForGroupActivities" />
	
	<bean id="updateNotificationsOnNameChangeMapper" class="org.eurekastreams.server.persistence.mappers.db.UpdateNotificationsOnNameChangeMapper" />
	
	<bean id="updatePersonMapper" class="org.eurekastreams.server.persistence.mappers.db.UpdatePersonMapper" />

	<bean id="insertRequestForGroupMembershipMapper" class="org.eurekastreams.server.persistence.mappers.db.InsertRequestForGroupMembership" />

	<bean id="deleteRequestForGroupMembershipMapper" class="org.eurekastreams.server.persistence.mappers.db.DeleteRequestForGroupMembership" />

	<bean id="getRequestsForGroupMembershipMapper" class="org.eurekastreams.server.persistence.mappers.db.GetRequestsForGroupMembershipByGroup" />
	
	<bean id="increaseOrgEmployeeCount" class="org.eurekastreams.server.persistence.mappers.db.IncreaseOrgEmployeeCount" />
	
	<bean id="getGadgetsByGadgetDefAndConsumerKey" class="org.eurekastreams.server.persistence.mappers.opensocial.GetGadgetsByGadgetDefAndConsumerKey" />

	<bean id="getOrgShortNamesByIdsMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetOrgShortNamesByIdsMapper" />

</beans>
